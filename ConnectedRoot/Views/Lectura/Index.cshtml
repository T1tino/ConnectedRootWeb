@model ConnectedRoot.ViewModels.LecturaPaginadoViewModel

@{
    ViewData["Title"] = "Lista de Lecturas de Sensores";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>
        <strong><i class="fas fa-chart-line"></i> Gesti√≥n de Lecturas de Sensores</strong>
    </h2>
    <a asp-action="Create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Registrar Nueva Lectura
    </a>
</div>

<!-- Mensajes de feedback -->
@if (!string.IsNullOrEmpty(ViewBag.Error))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        @ViewBag.Error
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (!string.IsNullOrEmpty(ViewBag.Success))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle"></i>
        @ViewBag.Success
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle"></i>
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle"></i>
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Panel de Filtros -->
<div class="card shadow-sm mb-4">
    <div class="card-header bg-light">
        <h6 class="card-title mb-0">
            <i class="fas fa-filter"></i> Filtros de B√∫squeda
        </h6>
    </div>
    <div class="card-body">
        <form method="get" asp-action="Index">
            <div class="row g-3">
                <!-- B√∫squeda por texto -->
                <div class="col-md-3">
                    <label for="busquedaTexto" class="form-label">Buscar</label>
                    <input type="text" 
                           class="form-control" 
                           id="busquedaTexto" 
                           name="busquedaTexto" 
                           value="@Model.BusquedaTexto" 
                           placeholder="Tipo o unidad">
                </div>
                
                <!-- Filtro por tipo -->
                <div class="col-md-2">
                    <label for="filtroTipo" class="form-label">Tipo</label>
                    <select class="form-select" id="filtroTipo" name="filtroTipo">
                        @foreach (var tipo in Model.TiposDisponibles)
                        {
                            <option value="@tipo" selected="@(Model.FiltroTipo == tipo)">
                                @switch (tipo)
                                {
                                    case "Temperatura":
                                        <text>üå°Ô∏è Temperatura</text>
                                        break;
                                    case "Humedad del Suelo":
                                        <text>üíß Humedad Suelo</text>
                                        break;
                                    case "Humedad Ambiental":
                                        <text>üå´Ô∏è Humedad Amb.</text>
                                        break;
                                    case "Luminosidad":
                                        <text>‚òÄÔ∏è Luminosidad</text>
                                        break;
                                    case "pH del Suelo":
                                        <text>‚öóÔ∏è pH del Suelo</text>
                                        break;
                                    default:
                                        @tipo
                                        break;
                                }
                            </option>
                        }
                    </select>
                </div>

                <!-- Filtro por sensor -->
                <div class="col-md-2">
                    <label for="filtroSensor" class="form-label">Sensor</label>
                    <select class="form-select" id="filtroSensor" name="filtroSensor">
                        @foreach (var sensor in Model.SensoresDisponibles)
                        {
                            <option value="@sensor.Key" selected="@(Model.FiltroSensor == sensor.Key)">@sensor.Value</option>
                        }
                    </select>
                </div>

                <!-- Fecha desde -->
                <div class="col-md-2">
                    <label for="filtroFechaDesde" class="form-label">Desde</label>
                    <input type="date" 
                           class="form-control" 
                           id="filtroFechaDesde" 
                           name="filtroFechaDesde" 
                           value="@Model.FiltroFechaDesde">
                </div>

                <!-- Fecha hasta -->
                <div class="col-md-2">
                    <label for="filtroFechaHasta" class="form-label">Hasta</label>
                    <input type="date" 
                           class="form-control" 
                           id="filtroFechaHasta" 
                           name="filtroFechaHasta" 
                           value="@Model.FiltroFechaHasta">
                </div>
                
                <!-- Botones -->
                <div class="col-md-1 d-flex align-items-end">
                    <div class="btn-group-vertical w-100" role="group">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-search">Filtrar</i> 
                    </button>
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                        <i class="fas fa-times">Limpiar</i> 
                    </a>
                    </div
                </div>

                
            </div>
        </form>
    </div>
</div>

<!-- Contenido principal -->
@if (Model.TotalLecturas == 0)
{
    @if (string.IsNullOrEmpty(Model.BusquedaTexto) && Model.FiltroTipo == "Todos" && 
         Model.FiltroSensor == "Todos" && string.IsNullOrEmpty(Model.FiltroFechaDesde) && 
         string.IsNullOrEmpty(Model.FiltroFechaHasta))
    {
        <!-- No hay lecturas en absoluto -->
        <div class="text-center py-5">
            <div class="alert alert-info border-0 shadow-sm">
                <i class="fas fa-chart-line fa-3x text-info mb-3"></i>
                <h4>¬°Sistema listo! üìä</h4>
                <p class="mb-3">MongoDB est√° conectado correctamente, pero no hay lecturas registradas a√∫n.</p>
                <a asp-action="Create" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Registrar primera lectura
                </a>
                <a asp-controller="Sensor" asp-action="Index" class="btn btn-outline-secondary ms-2">
                    <i class="fas fa-microchip"></i> Ver sensores
                </a>
            </div>
        </div>
    }
    else
    {
        <!-- No hay resultados para la b√∫squeda -->
        <div class="text-center py-5">
            <div class="alert alert-warning border-0 shadow-sm">
                <i class="fas fa-search fa-3x text-warning mb-3"></i>
                <h4>No se encontraron resultados</h4>
                <p class="mb-3">No hay lecturas que coincidan con los filtros aplicados.</p>
                <a href="@Url.Action("Index")" class="btn btn-outline-primary">
                    <i class="fas fa-undo"></i> Limpiar filtros
                </a>
            </div>
        </div>
    }
}
else
{
    <!-- Informaci√≥n de resultados -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0">
            <i class="fas fa-list"></i> Lista de Lecturas
            <span class="badge bg-primary fs-6">@Model.TotalLecturas lectura(s)</span>
        </h5>
        <small class="text-muted">
            <i class="fas fa-info-circle"></i>
            Mostrando @Model.LecturaDesde-@Model.LecturaHasta de @Model.TotalLecturas lectura(s)
        </small>
    </div>

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">
                                <i class="fas fa-calendar"></i> Fecha/Hora
                            </th>
                            <th scope="col">
                                <i class="fas fa-microchip"></i> Sensor
                            </th>
                            <th scope="col">
                                <i class="fas fa-map-pin"></i> Ubicaci√≥n
                            </th>
                            <th scope="col">
                                <i class="fas fa-chart-bar"></i> Tipo
                            </th>
                            <th scope="col" class="text-center">
                                <i class="fas fa-tachometer-alt"></i> Valor
                            </th>
                            <th scope="col" class="text-center">
                                <i class="fas fa-cogs"></i> Acciones
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var lectura in Model.Lecturas)
                        {
                            <tr>
                                <td>
                                    <strong>@lectura.FechaHora.ToString("dd/MM/yyyy")</strong><br>
                                    <small class="text-muted">@lectura.FechaHora.ToString("HH:mm:ss")</small>
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(lectura.SensorId) && Model.NombresSensores.ContainsKey(lectura.SensorId))
                                    {
                                        <span class="text-info">@Model.NombresSensores[lectura.SensorId]</span>
                                    }
                                    else
                                    {
                                        <small class="text-muted">Sensor no encontrado</small>
                                    }
                                </td>
                                <td>
                                    @{
                                        // Buscar la zona del sensor
                                        var sensor = Model.Lecturas.Where(l => l.SensorId == lectura.SensorId).FirstOrDefault();
                                        // Esta l√≥gica necesitar√≠a mejorar para obtener la zona desde el backend
                                    }
                                    <small class="text-muted">Zona no disponible</small>
                                </td>
                                <td>
                                    <span class="badge @(lectura.Tipo.ToLower().Contains("temperatura") ? "bg-danger" : 
                                                         lectura.Tipo.ToLower().Contains("humedad") ? "bg-primary" : 
                                                         lectura.Tipo.ToLower().Contains("ph") ? "bg-dark" : "bg-success")">
                                        @switch (lectura.Tipo.ToLower())
                                        {
                                            case var t when t.Contains("temperatura"):
                                                <text>üå°Ô∏è @lectura.Tipo</text>
                                                break;
                                            case var t when t.Contains("humedad"):
                                                <text>üíß @lectura.Tipo</text>
                                                break;
                                            case var t when t.Contains("luminosidad"):
                                                <text>‚òÄÔ∏è @lectura.Tipo</text>
                                                break;
                                            case var t when t.Contains("ph"):
                                                <text>‚öóÔ∏è @lectura.Tipo</text>
                                                break;
                                            default:
                                                <text>üìä @lectura.Tipo</text>
                                                break;
                                        }
                                    </span>
                                </td>
                                <td class="text-center">
                                    <strong class="@(lectura.Tipo.ToLower().Contains("temperatura") ? "text-danger" : 
                                                   lectura.Tipo.ToLower().Contains("humedad") ? "text-primary" : "text-success")">
                                        @lectura.Valor.ToString("F2")
                                    </strong>
                                    <br><small class="text-muted">@lectura.Unidad</small>
                                </td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <!-- Bot√≥n Details -->
                                        <a asp-action="Details" asp-route-id="@lectura.Id" 
                                           class="btn btn-sm btn-outline-info"
                                           title="Ver detalles de la lectura" 
                                           data-bs-toggle="tooltip">
                                            <i class="fas fa-eye"></i>
                                        </a>

                                        <!-- Bot√≥n Edit -->
                                        <a asp-action="Edit" asp-route-id="@lectura.Id" 
                                           class="btn btn-sm btn-outline-warning"
                                           title="Editar lectura" 
                                           data-bs-toggle="tooltip">
                                            <i class="fas fa-edit"></i>
                                        </a>

                                        <!-- Bot√≥n Delete -->
                                        <form asp-action="Delete" asp-route-id="@lectura.Id" method="post" class="d-inline">
                                            @Html.AntiForgeryToken()
                                            <button type="submit" 
                                                    class="btn btn-sm btn-outline-danger"
                                                    title="Eliminar lectura"
                                                    data-bs-toggle="tooltip"
                                                    onclick="return confirm('¬øEliminar esta lectura?')">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Paginaci√≥n -->
    @if (Model.TotalPaginas > 1)
    {
        <nav aria-label="Paginaci√≥n de lecturas" class="mt-4">
            <ul class="pagination justify-content-center">
                <!-- Primera p√°gina -->
                @if (Model.TienePaginaAnterior)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { busquedaTexto = Model.BusquedaTexto, filtroTipo = Model.FiltroTipo, filtroSensor = Model.FiltroSensor, filtroFechaDesde = Model.FiltroFechaDesde, filtroFechaHasta = Model.FiltroFechaHasta, pagina = 1 })">
                            <i class="fas fa-angle-double-left"></i>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { busquedaTexto = Model.BusquedaTexto, filtroTipo = Model.FiltroTipo, filtroSensor = Model.FiltroSensor, filtroFechaDesde = Model.FiltroFechaDesde, filtroFechaHasta = Model.FiltroFechaHasta, pagina = Model.PaginaActual - 1 })">
                            <i class="fas fa-angle-left"></i>
                        </a>
                    </li>
                }

                <!-- P√°ginas num√©ricas -->
                @{
                    int paginaInicio = Math.Max(1, Model.PaginaActual - 2);
                    int paginaFin = Math.Min(Model.TotalPaginas, Model.PaginaActual + 2);
                }

                @for (int i = paginaInicio; i <= paginaFin; i++)
                {
                    <li class="page-item @(i == Model.PaginaActual ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { busquedaTexto = Model.BusquedaTexto, filtroTipo = Model.FiltroTipo, filtroSensor = Model.FiltroSensor, filtroFechaDesde = Model.FiltroFechaDesde, filtroFechaHasta = Model.FiltroFechaHasta, pagina = i })">
                            @i
                        </a>
                    </li>
                }

                <!-- √öltima p√°gina -->
                @if (Model.TienePaginaSiguiente)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { busquedaTexto = Model.BusquedaTexto, filtroTipo = Model.FiltroTipo, filtroSensor = Model.FiltroSensor, filtroFechaDesde = Model.FiltroFechaDesde, filtroFechaHasta = Model.FiltroFechaHasta, pagina = Model.PaginaActual + 1 })">
                            <i class="fas fa-angle-right"></i>
                        </a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { busquedaTexto = Model.BusquedaTexto, filtroTipo = Model.FiltroTipo, filtroSensor = Model.FiltroSensor, filtroFechaDesde = Model.FiltroFechaDesde, filtroFechaHasta = Model.FiltroFechaHasta, pagina = Model.TotalPaginas })">
                            <i class="fas fa-angle-double-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }
}

@section Scripts {
    <script>
        // Inicializar tooltips de Bootstrap
        document.addEventListener('DOMContentLoaded', function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });

        // Auto-dismiss alerts
        setTimeout(function() {
            const alerts = document.querySelectorAll('.alert-dismissible');
            alerts.forEach(function(alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);

        // Validaci√≥n de fechas
        document.getElementById('filtroFechaDesde').addEventListener('change', function() {
            const fechaDesde = this.value;
            const fechaHasta = document.getElementById('filtroFechaHasta').value;
            
            if (fechaDesde && fechaHasta && fechaDesde > fechaHasta) {
                alert('La fecha "Desde" no puede ser mayor que la fecha "Hasta"');
                this.value = '';
            }
        });

        document.getElementById('filtroFechaHasta').addEventListener('change', function() {
            const fechaHasta = this.value;
            const fechaDesde = document.getElementById('filtroFechaDesde').value;
            
            if (fechaDesde && fechaHasta && fechaHasta < fechaDesde) {
                alert('La fecha "Hasta" no puede ser menor que la fecha "Desde"');
                this.value = '';
            }
        });
    </script>
}